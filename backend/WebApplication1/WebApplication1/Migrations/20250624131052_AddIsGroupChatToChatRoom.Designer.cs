// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication1.Data;

#nullable disable

namespace WebApplication1.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250624131052_AddIsGroupChatToChatRoom")]
    partial class AddIsGroupChatToChatRoom
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("ChatRoomUser", b =>
                {
                    b.Property<string>("ChatRoomsId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ParticipantsId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("ChatRoomsId", "ParticipantsId");

                    b.HasIndex("ParticipantsId");

                    b.ToTable("ChatRoomParticipants", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("UserUser", b =>
                {
                    b.Property<string>("FriendsId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("FriendsId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserFriends", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Auth.StoredToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastUsedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastUsedIp")
                        .HasColumnType("longtext");

                    b.Property<string>("LastUsedUserAgent")
                        .HasColumnType("longtext");

                    b.Property<string>("Metadata")
                        .HasColumnType("longtext");

                    b.Property<string>("RevocationReason")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TokenType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UsageCount")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("StoredToken");
                });

            modelBuilder.Entity("WebApplication1.Models.Chat.Attachment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Height")
                        .HasColumnType("int");

                    b.Property<string>("MessageId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ThumbnailUrl")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UploadedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("WebApplication1.Models.Chat.ChatRoom", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AdminId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("AllowInvites")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AllowMessageEditing")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(2025, 6, 24, 13, 10, 51, 983, DateTimeKind.Utc).AddTicks(5129));

                    b.Property<string>("CustomData")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsGroupChat")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastActivityAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MaxParticipants")
                        .HasColumnType("int");

                    b.Property<int>("MaxPinnedMessages")
                        .HasColumnType("int");

                    b.Property<int>("MessageEditTimeLimit")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Picture")
                        .HasColumnType("longtext");

                    b.Property<bool>("RequireApproval")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("ChatRooms");
                });

            modelBuilder.Entity("WebApplication1.Models.Chat.ChatRoomRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ChatRoomId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ChatRoomId");

                    b.ToTable("ChatRoomRole");
                });

            modelBuilder.Entity("WebApplication1.Models.Chat.MessageReadStatus", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ChatRoomId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("MessageId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ReadAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ChatRoomId");

                    b.ToTable("MessageReadStatus");
                });

            modelBuilder.Entity("WebApplication1.Models.Chat.PinnedMessage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ChatRoomId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("MessageId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("PinnedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PinnedByUserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ChatRoomId");

                    b.HasIndex("MessageId");

                    b.ToTable("PinnedMessage");
                });

            modelBuilder.Entity("WebApplication1.Models.Messages.Message", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ChatRoomId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DeleteReason")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("EditCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("HiddenForUsers")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsEdited")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPinned")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("PinnedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PinnedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("ReactionsJson")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<string>("ReplyToMessageId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(2025, 6, 24, 13, 10, 51, 987, DateTimeKind.Utc).AddTicks(4376));

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChatRoomId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("ReplyToMessageId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("WebApplication1.Models.Messages.MessageBackup", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("BackupPath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("BackupSize")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<string>("ChatRoomId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MessageCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("MessageBackups");
                });

            modelBuilder.Entity("WebApplication1.Models.Messages.MessageHistory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ChangeDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("EditReason")
                        .HasColumnType("longtext");

                    b.Property<int>("EditType")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EditedByUserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("MessageId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<string>("NewContent")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OldContent")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("EditedByUserId");

                    b.HasIndex("MessageId");

                    b.ToTable("MessageHistories");
                });

            modelBuilder.Entity("WebApplication1.Models.Notifications.Notification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ChatRoomId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Content")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Data")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("GroupCount")
                        .HasColumnType("int");

                    b.Property<string>("GroupId")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MessageId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ChatRoomId");

                    b.HasIndex("MessageId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("WebApplication1.Models.Notifications.NotificationPreferences", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("AnnouncementNotifications")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ArchiveReadNotifications")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("AutoDeleteDays")
                        .HasColumnType("int");

                    b.Property<bool>("AutoDeleteRead")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AutoDeleteUnread")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("BlockedSenders")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("BrowserNotifications")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CustomSettings")
                        .HasColumnType("longtext");

                    b.Property<bool>("DoNotDisturb")
                        .HasColumnType("tinyint(1)");

                    b.Property<TimeSpan?>("DoNotDisturbEnd")
                        .HasColumnType("time(6)");

                    b.Property<TimeSpan?>("DoNotDisturbStart")
                        .HasColumnType("time(6)");

                    b.Property<bool>("EnableDesktopNotifications")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("EnableSound")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("EnableVibration")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("EnabledChannelsJson")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<string>("EnabledTypesJson")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<bool>("EventNotifications")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("FriendRequestNotifications")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("GroupNotifications")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsNotificationsEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("MarkAsReadOnOpen")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("MarkAsReadOnReply")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("MarketingNotifications")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("MentionNotifications")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("MessageNotifications")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("NewsletterNotifications")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("NotificationFrequency")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("NotificationRetentionDays")
                        .HasColumnType("int");

                    b.Property<string>("NotificationSound")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NotificationStyle")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("NotificationVolume")
                        .HasColumnType("int");

                    b.Property<bool>("ProfileUpdateNotifications")
                        .HasColumnType("tinyint(1)");

                    b.Property<TimeSpan>("QuietHoursEnd")
                        .HasColumnType("time(6)");

                    b.Property<TimeSpan>("QuietHoursStart")
                        .HasColumnType("time(6)");

                    b.Property<bool>("ReactionNotifications")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SecurityNotifications")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ShowNotificationBadge")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ShowNotificationCount")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ShowNotificationIcon")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ShowNotificationTime")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ShowNotificationToast")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ShowPreview")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SoundEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("StatusChangeNotifications")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SystemNotifications")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UserId");

                    b.ToTable("NotificationPreferences");
                });

            modelBuilder.Entity("WebApplication1.Models.Notifications.NotificationSettings", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AutoDeleteDays")
                        .HasColumnType("int");

                    b.Property<bool>("AutoDeleteRead")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AutoDeleteUnread")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CustomSettings")
                        .HasColumnType("longtext");

                    b.Property<bool>("DesktopNotifications")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("DoNotDisturb")
                        .HasColumnType("tinyint(1)");

                    b.Property<TimeSpan?>("DoNotDisturbEnd")
                        .HasColumnType("time(6)");

                    b.Property<TimeSpan?>("DoNotDisturbStart")
                        .HasColumnType("time(6)");

                    b.Property<bool>("EmailNotifications")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<bool>("GroupNotifications")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("InAppNotifications")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("MobileNotifications")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("NotificationRetentionDays")
                        .HasColumnType("int");

                    b.Property<string>("NotificationSound")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("NotificationVolume")
                        .HasColumnType("int");

                    b.Property<string>("PrioritySettingsJson")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<bool>("PushNotifications")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<bool>("ShowPreview")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SoundEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TypeSettingsJson")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("VibrationEnabled")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("UserId");

                    b.ToTable("NotificationSettings");
                });

            modelBuilder.Entity("WebApplication1.Models.Notifications.NotificationTemplate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ParametersJson")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("NotificationTemplates");
                });

            modelBuilder.Entity("WebApplication1.Models.Users.BlockedUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("BlockCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<DateTime?>("BlockExpiresAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("BlockedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("BlockedUserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("BlockerUserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsPermanent")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastUnblockedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Reason")
                        .HasColumnType("longtext");

                    b.Property<string>("UnblockReason")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("BlockedUserId");

                    b.HasIndex("BlockerUserId");

                    b.ToTable("BlockedUsers");
                });

            modelBuilder.Entity("WebApplication1.Models.Users.FriendRequest", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("BlockReason")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("BlockedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("RespondedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ResponseMessage")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("FriendRequests");
                });

            modelBuilder.Entity("WebApplication1.Models.Users.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Bio")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(2025, 6, 24, 13, 10, 51, 976, DateTimeKind.Utc).AddTicks(1141));

                    b.Property<string>("DisplayName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("EmailVerificationToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("EmailVerificationTokenExpiresAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsOnline")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastSeen")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("longtext");

                    b.Property<string>("ProfilePictureUrl")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("Role")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Users.UserActivity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ActivityType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("longtext");

                    b.Property<string>("IpAddress")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Location")
                        .HasColumnType("longtext");

                    b.Property<string>("RelatedEntityId")
                        .HasColumnType("longtext");

                    b.Property<string>("RelatedEntityType")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserAgent")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserActivities");
                });

            modelBuilder.Entity("WebApplication1.Models.Users.UserPreferences", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Bio")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActivityStatusPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsArchivedMessagesListPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsBioPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsBlockedUsersListPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsCalendarPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsCheckInsPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsContactListPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeletedMessagesListPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeviceListPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsEmailPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsEventsPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsFriendListPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsGroupListPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsLastSeenPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsLocationPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsLoginHistoryPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMediaGalleryPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMessageHistoryPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMutedUsersListPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsNotesPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsNotificationSettingsPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsOnlineStatusPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPhoneNumberPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPinnedMessagesListPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPrivacySettingsPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsProfilePicturePublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsReadReceiptsPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRecentCalendarItemsListPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRecentContactsListPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRecentEventsListPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRecentFilesListPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRecentGroupsListPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRecentLinksListPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRecentLocationsListPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRecentNotesListPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRecentSearchesListPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRecentTasksListPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsReportedUsersListPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRestrictedUsersListPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSavedItemsListPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSecuritySettingsPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsStarredMessagesListPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsTaggedPhotosPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsTasksPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsTypingIndicatorPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsWebsitePublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Location")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId1")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Website")
                        .HasColumnType("longtext");

                    b.HasKey("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("UserPreferences");
                });

            modelBuilder.Entity("WebApplication1.Models.Users.UserSettings", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AllowedFileTypes")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("AutoSaveDrafts")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("BackupFrequency")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DraftAutoSaveInterval")
                        .HasColumnType("int");

                    b.Property<bool>("EmailNotificationsEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("EnableCalendarSync")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("EnableCloudBackup")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("EnableContactSync")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("EnableFileSharing")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("EnableLocationSharing")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("EnableMessageSearch")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("EnableNoteSync")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("EnableScreenSharing")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("EnableTaskSync")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("EnableVideoCalls")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("EnableVoiceMessages")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LastBackup")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MaxFileSize")
                        .HasColumnType("int");

                    b.Property<bool>("NotificationsEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("PushNotificationsEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("RememberMe")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("SessionTimeout")
                        .HasColumnType("int");

                    b.Property<bool>("ShowLastSeen")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ShowOnlineStatus")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ShowReadReceipts")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ShowTypingIndicator")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SoundEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId1")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("WebApplication1.Services.NotificationGroup", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserIds")
                        .IsRequired()
                        .HasColumnType("json");

                    b.HasKey("Id");

                    b.ToTable("NotificationGroups");
                });

            modelBuilder.Entity("WebApplication1.Services.RefreshToken", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsValid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ExpiryDate");

                    b.HasIndex("Token");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("WebApplication1.Services.ScheduledNotification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsRecurring")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("RecurrencePattern")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("ScheduledTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ScheduledNotifications");
                });

            modelBuilder.Entity("WebApplication1.Services.SecurityEvent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserAgent")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("SecurityEvents");
                });

            modelBuilder.Entity("WebApplication1.Services.StoredToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsRevoked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("LastUsedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastUsedIp")
                        .HasColumnType("longtext");

                    b.Property<string>("LastUsedUserAgent")
                        .HasColumnType("longtext");

                    b.Property<string>("Metadata")
                        .HasColumnType("json");

                    b.Property<string>("RevocationReason")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("TokenType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UsageCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("Token");

                    b.HasIndex("UserId");

                    b.ToTable("StoredTokens");
                });

            modelBuilder.Entity("WebApplication1.Services.TokenBlacklist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("AddedAt");

                    b.HasIndex("Token");

                    b.ToTable("TokenBlacklist");
                });

            modelBuilder.Entity("ChatRoomUser", b =>
                {
                    b.HasOne("WebApplication1.Models.Chat.ChatRoom", null)
                        .WithMany()
                        .HasForeignKey("ChatRoomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("ParticipantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebApplication1.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebApplication1.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebApplication1.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserUser", b =>
                {
                    b.HasOne("WebApplication1.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("FriendsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication1.Models.Auth.StoredToken", b =>
                {
                    b.HasOne("WebApplication1.Models.Users.User", null)
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication1.Models.Chat.Attachment", b =>
                {
                    b.HasOne("WebApplication1.Models.Messages.Message", "Message")
                        .WithMany("Attachments")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("WebApplication1.Models.Chat.ChatRoom", b =>
                {
                    b.HasOne("WebApplication1.Models.Users.User", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("WebApplication1.Models.Chat.ChatRoomRole", b =>
                {
                    b.HasOne("WebApplication1.Models.Chat.ChatRoom", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("ChatRoomId");
                });

            modelBuilder.Entity("WebApplication1.Models.Chat.MessageReadStatus", b =>
                {
                    b.HasOne("WebApplication1.Models.Chat.ChatRoom", null)
                        .WithMany("MessageReadStatuses")
                        .HasForeignKey("ChatRoomId");
                });

            modelBuilder.Entity("WebApplication1.Models.Chat.PinnedMessage", b =>
                {
                    b.HasOne("WebApplication1.Models.Chat.ChatRoom", null)
                        .WithMany("PinnedMessages")
                        .HasForeignKey("ChatRoomId");

                    b.HasOne("WebApplication1.Models.Messages.Message", "Message")
                        .WithMany()
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("WebApplication1.Models.Messages.Message", b =>
                {
                    b.HasOne("WebApplication1.Models.Chat.ChatRoom", "ChatRoom")
                        .WithMany("Messages")
                        .HasForeignKey("ChatRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Users.User", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId");

                    b.HasOne("WebApplication1.Models.Messages.Message", "ReplyToMessage")
                        .WithMany("Replies")
                        .HasForeignKey("ReplyToMessageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApplication1.Models.Users.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChatRoom");

                    b.Navigation("DeletedByUser");

                    b.Navigation("ReplyToMessage");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("WebApplication1.Models.Messages.MessageHistory", b =>
                {
                    b.HasOne("WebApplication1.Models.Users.User", "EditedByUser")
                        .WithMany()
                        .HasForeignKey("EditedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Messages.Message", "Message")
                        .WithMany("EditHistory")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditedByUser");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("WebApplication1.Models.Notifications.Notification", b =>
                {
                    b.HasOne("WebApplication1.Models.Chat.ChatRoom", "ChatRoom")
                        .WithMany()
                        .HasForeignKey("ChatRoomId");

                    b.HasOne("WebApplication1.Models.Messages.Message", "Message")
                        .WithMany("Notifications")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApplication1.Models.Users.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatRoom");

                    b.Navigation("Message");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication1.Models.Notifications.NotificationPreferences", b =>
                {
                    b.HasOne("WebApplication1.Models.Users.User", "User")
                        .WithOne("NotificationPreferences")
                        .HasForeignKey("WebApplication1.Models.Notifications.NotificationPreferences", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication1.Models.Notifications.NotificationSettings", b =>
                {
                    b.HasOne("WebApplication1.Models.Users.User", "User")
                        .WithOne("NotificationSettings")
                        .HasForeignKey("WebApplication1.Models.Notifications.NotificationSettings", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication1.Models.Users.BlockedUser", b =>
                {
                    b.HasOne("WebApplication1.Models.Users.User", "BlockedUserEntity")
                        .WithMany("BlockedByUsers")
                        .HasForeignKey("BlockedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Users.User", "BlockerUser")
                        .WithMany("BlockedUsers")
                        .HasForeignKey("BlockerUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BlockedUserEntity");

                    b.Navigation("BlockerUser");
                });

            modelBuilder.Entity("WebApplication1.Models.Users.FriendRequest", b =>
                {
                    b.HasOne("WebApplication1.Models.Users.User", "Receiver")
                        .WithMany("ReceivedFriendRequests")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Users.User", "Sender")
                        .WithMany("SentFriendRequests")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("WebApplication1.Models.Users.UserActivity", b =>
                {
                    b.HasOne("WebApplication1.Models.Users.User", "User")
                        .WithMany("Activities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication1.Models.Users.UserPreferences", b =>
                {
                    b.HasOne("WebApplication1.Models.Users.User", null)
                        .WithOne("UserPreferences")
                        .HasForeignKey("WebApplication1.Models.Users.UserPreferences", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication1.Models.Users.UserSettings", b =>
                {
                    b.HasOne("WebApplication1.Models.Users.User", null)
                        .WithOne("UserSettings")
                        .HasForeignKey("WebApplication1.Models.Users.UserSettings", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication1.Services.RefreshToken", b =>
                {
                    b.HasOne("WebApplication1.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication1.Models.Chat.ChatRoom", b =>
                {
                    b.Navigation("MessageReadStatuses");

                    b.Navigation("Messages");

                    b.Navigation("PinnedMessages");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("WebApplication1.Models.Messages.Message", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("EditHistory");

                    b.Navigation("Notifications");

                    b.Navigation("Replies");
                });

            modelBuilder.Entity("WebApplication1.Models.Users.User", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("BlockedByUsers");

                    b.Navigation("BlockedUsers");

                    b.Navigation("NotificationPreferences");

                    b.Navigation("NotificationSettings");

                    b.Navigation("Notifications");

                    b.Navigation("ReceivedFriendRequests");

                    b.Navigation("RefreshTokens");

                    b.Navigation("SentFriendRequests");

                    b.Navigation("UserPreferences");

                    b.Navigation("UserSettings");
                });
#pragma warning restore 612, 618
        }
    }
}
